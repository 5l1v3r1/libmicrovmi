#ifndef LIBMICROVMI_H
#define LIBMICROVMI_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stddef.h>
#include <stdint.h>

typedef enum {
    Dummy,
    HyperV,
    KVM,
    VirtualBox,
    Xen,
} DriverType;

typedef enum {
    MicrovmiSuccess,
    MicrovmiFailure,
} MicrovmiStatus;

typedef struct {
    void *driver;
    DriverType driver_type;
} MicrovmiContext;

typedef struct {
    uint64_t rax;
    uint64_t rbx;
    uint64_t rcx;
    uint64_t rdx;
    uint64_t rsi;
    uint64_t rdi;
    uint64_t rsp;
    uint64_t rbp;
    uint64_t r8;
    uint64_t r9;
    uint64_t r10;
    uint64_t r11;
    uint64_t r12;
    uint64_t r13;
    uint64_t r14;
    uint64_t r15;
    uint64_t rip;
    uint64_t rflags;
} X86Registers;

typedef enum {
    X86,
} Registers_Tag;

typedef struct {
    X86Registers _0;
} X86_Body;

typedef struct {
    Registers_Tag tag;
    union {
        X86_Body x86;
    };
} Registers;

void microvmi_destroy(MicrovmiContext *context);

MicrovmiStatus microvmi_get_max_physical_addr(MicrovmiContext *context, uint64_t *address_ptr);

MicrovmiContext *microvmi_init(const char *domain_name, DriverType driver_type);

MicrovmiStatus microvmi_pause(MicrovmiContext *context);

MicrovmiStatus microvmi_read_physical(MicrovmiContext *context,
                                      uint64_t physical_address,
                                      uint8_t *buffer,
                                      size_t size);

MicrovmiStatus microvmi_read_registers(MicrovmiContext *context,
                                       uint16_t vcpu,
                                       Registers *registers);

MicrovmiStatus microvmi_resume(MicrovmiContext *context);

#endif /* LIBMICROVMI_H */
